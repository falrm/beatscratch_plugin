// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/protobeats_plugin.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct MidiSynthesizer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var enabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MidiController {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var enabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MidiDevices {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var synthesizers: [MidiSynthesizer] = []

  var controllers: [MidiController] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SynthesizerApp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var installed: Bool = false

  var storeLink: String = String()

  var launchLink: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ControllerApp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var installed: Bool = false

  var storeLink: String = String()

  var launchLink: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MidiApps {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var synthesizers: [SynthesizerApp] = []

  var controllers: [ControllerApp] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct MidiNotes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var midiNotes: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RegisterMelody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var melodyID: String = String()

  var partID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Playback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mode: Playback.Mode = .score

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Mode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case score // = 0
    case section // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .score
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .score
      case 1: self = .section
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .score: return 0
      case .section: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Playback.Mode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Playback.Mode] = [
    .score,
    .section,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MidiSynthesizer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MidiSynthesizer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularBoolField(value: &self.enabled)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MidiSynthesizer, rhs: MidiSynthesizer) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MidiController: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MidiController"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularBoolField(value: &self.enabled)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MidiController, rhs: MidiController) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.enabled != rhs.enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MidiDevices: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MidiDevices"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "synthesizers"),
    2: .same(proto: "controllers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.synthesizers)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.controllers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.synthesizers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.synthesizers, fieldNumber: 1)
    }
    if !self.controllers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.controllers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MidiDevices, rhs: MidiDevices) -> Bool {
    if lhs.synthesizers != rhs.synthesizers {return false}
    if lhs.controllers != rhs.controllers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SynthesizerApp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SynthesizerApp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "installed"),
    3: .same(proto: "storeLink"),
    4: .same(proto: "launchLink"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularBoolField(value: &self.installed)
      case 3: try decoder.decodeSingularStringField(value: &self.storeLink)
      case 4: try decoder.decodeSingularStringField(value: &self.launchLink)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.installed != false {
      try visitor.visitSingularBoolField(value: self.installed, fieldNumber: 2)
    }
    if !self.storeLink.isEmpty {
      try visitor.visitSingularStringField(value: self.storeLink, fieldNumber: 3)
    }
    if !self.launchLink.isEmpty {
      try visitor.visitSingularStringField(value: self.launchLink, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SynthesizerApp, rhs: SynthesizerApp) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.installed != rhs.installed {return false}
    if lhs.storeLink != rhs.storeLink {return false}
    if lhs.launchLink != rhs.launchLink {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ControllerApp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ControllerApp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "installed"),
    3: .same(proto: "storeLink"),
    4: .same(proto: "launchLink"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularBoolField(value: &self.installed)
      case 3: try decoder.decodeSingularStringField(value: &self.storeLink)
      case 4: try decoder.decodeSingularStringField(value: &self.launchLink)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.installed != false {
      try visitor.visitSingularBoolField(value: self.installed, fieldNumber: 2)
    }
    if !self.storeLink.isEmpty {
      try visitor.visitSingularStringField(value: self.storeLink, fieldNumber: 3)
    }
    if !self.launchLink.isEmpty {
      try visitor.visitSingularStringField(value: self.launchLink, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ControllerApp, rhs: ControllerApp) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.installed != rhs.installed {return false}
    if lhs.storeLink != rhs.storeLink {return false}
    if lhs.launchLink != rhs.launchLink {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MidiApps: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MidiApps"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "synthesizers"),
    2: .same(proto: "controllers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.synthesizers)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.controllers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.synthesizers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.synthesizers, fieldNumber: 1)
    }
    if !self.controllers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.controllers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MidiApps, rhs: MidiApps) -> Bool {
    if lhs.synthesizers != rhs.synthesizers {return false}
    if lhs.controllers != rhs.controllers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MidiNotes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MidiNotes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "midi_notes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.midiNotes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.midiNotes.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.midiNotes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MidiNotes, rhs: MidiNotes) -> Bool {
    if lhs.midiNotes != rhs.midiNotes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RegisterMelody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RegisterMelody"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "melody_id"),
    2: .standard(proto: "part_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.melodyID)
      case 2: try decoder.decodeSingularStringField(value: &self.partID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.melodyID.isEmpty {
      try visitor.visitSingularStringField(value: self.melodyID, fieldNumber: 1)
    }
    if !self.partID.isEmpty {
      try visitor.visitSingularStringField(value: self.partID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RegisterMelody, rhs: RegisterMelody) -> Bool {
    if lhs.melodyID != rhs.melodyID {return false}
    if lhs.partID != rhs.partID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Playback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Playback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.mode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mode != .score {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Playback, rhs: Playback) -> Bool {
    if lhs.mode != rhs.mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Playback.Mode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "score"),
    1: .same(proto: "section"),
  ]
}
